@tool
extends TwitchData

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchCheckAutoModStatus
	


## 
## #/components/schemas/CheckAutoModStatusBody
class Body extends TwitchData:

	## The list of messages to check. The list must contain at least one message and may contain up to a maximum of 100 messages.
	@export var data: Array[BodyData]:
		set(val): 
			data = val
			track_data(&"data", val)
	var response: BufferedHTTPClient.ResponseData
	
	
	## Constructor with all required fields.
	static func create(_data: Array[BodyData]) -> Body:
		var body: Body = Body.new()
		body.data = _data
		return body
	
	
	static func from_json(d: Dictionary) -> Body:
		var result: Body = Body.new()
		if d.get("data", null) != null:
			for value in d["data"]:
				result.data.append(BodyData.from_json(value))
		return result
	


## The list of messages to check. The list must contain at least one message and may contain up to a maximum of 100 messages.
## #/components/schemas/CheckAutoModStatusBody/Data
class BodyData extends TwitchData:

	## A caller-defined ID used to correlate this message with the same message in the response.
	@export var msg_id: String:
		set(val): 
			msg_id = val
			track_data(&"msg_id", val)
	
	## The message to check.
	@export var msg_text: String:
		set(val): 
			msg_text = val
			track_data(&"msg_text", val)
	
	
	
	## Constructor with all required fields.
	static func create(_msg_id: String, _msg_text: String) -> BodyData:
		var body_data: BodyData = BodyData.new()
		body_data.msg_id = _msg_id
		body_data.msg_text = _msg_text
		return body_data
	
	
	static func from_json(d: Dictionary) -> BodyData:
		var result: BodyData = BodyData.new()
		if d.get("msg_id", null) != null:
			result.msg_id = d["msg_id"]
		if d.get("msg_text", null) != null:
			result.msg_text = d["msg_text"]
		return result
	


## 
## #/components/schemas/CheckAutoModStatusResponse
class Response extends TwitchData:

	## The list of messages and whether Twitch would approve them for chat.
	@export var data: Array[TwitchAutoModStatus]:
		set(val): 
			data = val
			track_data(&"data", val)
	var response: BufferedHTTPClient.ResponseData
	
	
	## Constructor with all required fields.
	static func create(_data: Array[TwitchAutoModStatus]) -> Response:
		var response: Response = Response.new()
		response.data = _data
		return response
	
	
	static func from_json(d: Dictionary) -> Response:
		var result: Response = Response.new()
		if d.get("data", null) != null:
			for value in d["data"]:
				result.data.append(TwitchAutoModStatus.from_json(value))
		return result
	