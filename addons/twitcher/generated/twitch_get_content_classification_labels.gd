@tool
extends TwitchData

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGetContentClassificationLabels
	


## 
## #/components/schemas/GetContentClassificationLabelsResponse
class Response extends TwitchData:

	## A list that contains information about the available content classification labels.
	@export var data: Array[TwitchContentClassificationLabel]:
		set(val): 
			data = val
			track_data(&"data", val)
	var response: BufferedHTTPClient.ResponseData
	
	
	## Constructor with all required fields.
	static func create(_data: Array[TwitchContentClassificationLabel]) -> Response:
		var response: Response = Response.new()
		response.data = _data
		return response
	
	
	static func from_json(d: Dictionary) -> Response:
		var result: Response = Response.new()
		if d.get("data", null) != null:
			for value in d["data"]:
				result.data.append(TwitchContentClassificationLabel.from_json(value))
		return result
	


## All optional parameters for TwitchAPI.get_content_classification_labels
## #/components/schemas/GetContentClassificationLabelsOpt
class Opt extends TwitchData:

	## Locale for the Content Classification Labels. You may specify a maximum of 1 locale. Default: `“en-US”`  
	## Supported locales: `"bg-BG", "cs-CZ", "da-DK", "da-DK", "de-DE", "el-GR", "en-GB", "en-US", "es-ES", "es-MX", "fi-FI", "fr-FR", "hu-HU", "it-IT", "ja-JP", "ko-KR", "nl-NL", "no-NO", "pl-PL", "pt-BT", "pt-PT", "ro-RO", "ru-RU", "sk-SK", "sv-SE", "th-TH", "tr-TR", "vi-VN", "zh-CN", "zh-TW"`
	@export var locale: String:
		set(val): 
			locale = val
			track_data(&"locale", val)
	
	
	
	## Constructor with all required fields.
	static func create() -> Opt:
		var opt: Opt = Opt.new()
		return opt
	
	
	static func from_json(d: Dictionary) -> Opt:
		var result: Opt = Opt.new()
		if d.get("locale", null) != null:
			result.locale = d["locale"]
		return result
	