@tool
extends TwitchData

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGetTeams
	


## 
## #/components/schemas/GetTeamsResponse
class Response extends TwitchData:

	## A list that contains the single team that you requested.
	@export var data: Array[TwitchTeam]:
		set(val): 
			data = val
			track_data(&"data", val)
	var response: BufferedHTTPClient.ResponseData
	
	
	## Constructor with all required fields.
	static func create(_data: Array[TwitchTeam]) -> Response:
		var response: Response = Response.new()
		response.data = _data
		return response
	
	
	static func from_json(d: Dictionary) -> Response:
		var result: Response = Response.new()
		if d.get("data", null) != null:
			for value in d["data"]:
				result.data.append(TwitchTeam.from_json(value))
		return result
	


## All optional parameters for TwitchAPI.get_teams
## #/components/schemas/GetTeamsOpt
class Opt extends TwitchData:

	## The name of the team to get. This parameter and the _id_ parameter are mutually exclusive; you must specify the team’s name or ID but not both.
	@export var name: String:
		set(val): 
			name = val
			track_data(&"name", val)
	
	## The ID of the team to get. This parameter and the _name_ parameter are mutually exclusive; you must specify the team’s name or ID but not both.
	@export var id: String:
		set(val): 
			id = val
			track_data(&"id", val)
	
	
	
	## Constructor with all required fields.
	static func create() -> Opt:
		var opt: Opt = Opt.new()
		return opt
	
	
	static func from_json(d: Dictionary) -> Opt:
		var result: Opt = Opt.new()
		if d.get("name", null) != null:
			result.name = d["name"]
		if d.get("id", null) != null:
			result.id = d["id"]
		return result
	