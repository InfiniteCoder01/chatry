@tool
extends TwitchData

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

## 
## #/components/schemas/UserChatColor
class_name TwitchUserChatColor
	
## An ID that uniquely identifies the user.
@export var user_id: String:
	set(val): 
		user_id = val
		track_data(&"user_id", val)

## The user’s login name.
@export var user_login: String:
	set(val): 
		user_login = val
		track_data(&"user_login", val)

## The user’s display name.
@export var user_name: String:
	set(val): 
		user_name = val
		track_data(&"user_name", val)

## The Hex color code that the user uses in chat for their name. If the user hasn’t specified a color in their settings, the string is empty.
@export var color: String:
	set(val): 
		color = val
		track_data(&"color", val)
var response: BufferedHTTPClient.ResponseData


## Constructor with all required fields.
static func create(_user_id: String, _user_login: String, _user_name: String, _color: String) -> TwitchUserChatColor:
	var twitch_user_chat_color: TwitchUserChatColor = TwitchUserChatColor.new()
	twitch_user_chat_color.user_id = _user_id
	twitch_user_chat_color.user_login = _user_login
	twitch_user_chat_color.user_name = _user_name
	twitch_user_chat_color.color = _color
	return twitch_user_chat_color


static func from_json(d: Dictionary) -> TwitchUserChatColor:
	var result: TwitchUserChatColor = TwitchUserChatColor.new()
	if d.get("user_id", null) != null:
		result.user_id = d["user_id"]
	if d.get("user_login", null) != null:
		result.user_login = d["user_login"]
	if d.get("user_name", null) != null:
		result.user_name = d["user_name"]
	if d.get("color", null) != null:
		result.color = d["color"]
	return result
